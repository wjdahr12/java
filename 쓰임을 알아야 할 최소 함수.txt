        
		
		charAt(int index)
		- 문자열에서 지정된 인덱스 위치의 문자 반환
		- 문자열의 길이보다 큰 인덱스를 지정하면 StringIndexOutOfBoundsException 예외 발생
			String str = "Hello";
			char ch = str.charAt(1); // ch에는 'e'가 저장됨
		
		
        compareTo(String anotherString) 
		- 문자열을 다른 문자열과 비교; 양수일 경우(현재 문자열이 더 큼), 음수일 경우(현재 문자열이 더작음), 0(두 문자열이 같음)
			String str1 = "apple";
			String str2 = "banana";
			int result = str1.compareTo(str2); // result에는 음수가 저장됨
		
		
		compareToIgnoreCase(String str)
		-  대소문자를 무시하고 문자열을 비교
		- 반환값은 compareTo()와 동일하게 작동
		
		
        startsWith(String prefix)
		- 문자열의 시작이 지정된 단어인지 확인여부
		- 지정 단어로 시작하면 true, 그렇지 않으면 false를 반환
			String str = "Hello, world!";
			print(str.startsWith("Hello")); // true
		
		
		endswith(String suffix)
		- 문자열의 끝이 지정된 단어인지 확인여부
		- 지정 단어로 끝나면 true, 그렇지 않으면 false를 반환
			String str = "Hello, world!";
			print(str.endsWith("world!")); // true
		
		
        equals()
		- 현재 문자열과 다른 객체가 동일한지 비교
			String str1 = "hello";
			String str2 = "HELLO";
			boolean isEqual = str1.equals(str2); // false
		
		
		equalsIgnoreCase()  
		- 대소문자를 무시하고 현재 문자열과 다른 문자열을 비교

		
        getbyte()
		- 문자열을 바이트 배열로 변환
			String str = "Hello, world!";
			byte[] byteArray = str.getBytes(); // 문자열을 바이트 배열로 변환
		

        indexof()
		- 지정된 문자열의 첫 번째 발생 위치(인덱스)를 반환
			String text = "Hello, world!";
			int index = text.indexOf("world"); // index에는 7이 저장됨
		
		
		lastindexof()
		- 문자열에서 지정된 문자열의 마지막 발생 위치를 반환
			String text = "Hello, world!";
			int lastIndex = text.lastIndexOf("o"); // lastIndex에는 8이 저장됨
		
		
        isblank()
		- 문자열이 공백문자(스페이스, 탭, 줄 바꿈 등)만 포함하고 있는지 여부 확인
		- 공백 문자만 포함하면 true, 그렇지 않으면 false를 반환
			String str = "   ";
			boolean isBlank = str.isBlank(); // isBlank에는 true가 저장됨
		
		
		isempty()
		- 문자열이 비어있는지 여부 확인
		- 비어있으면 true, 그렇지 않으면 false를 반환
			String str = "";
			boolean isEmpty = str.isEmpty(); // isEmpty에는 true가 저장됨

		
        join()
		- 문자열 배열 또는 요소들을 지정된 구분자로 연결하여 하나의 문자열로 반환
			String[] words = {"Hello", "world", "Java"};
			String result = String.join(" ", words); // result에는 "Hello world Java"가 저장됨
		
		
        length()
		- 문자열의 길이(문자 수) 반환
		
		
        matches(String regex)
		- 문자열이 정규 표현식 regex와 일지하는지 여부 확인
		- 일치하면 true, 그렇지 않으면 false를 반환
			String email = "example@email.com";
			boolean isValidEmail = email.matches
			("^[\\w.-]+@[\\w.-]+\\.[a-zA-Z]{2,4}$"); // isValidEmail에는 true가 저장됨
		
        
        replace(CharSequence target, CharSequence replacement)
		- 문자열에서 지정된 문자열 target을 다른 문자열 replacement으로 대체
			String text = "Hello, world!";
			String newText = text.replace("world", "Java");
			// newText에는 "Hello, Java!"가 저장됨

			
		replaceAll(String regex, String replacement)
		- 문자열에서 정규 표현식 regex와 일치하는 부분을 문자열 replacement으로 대체
			String text = "Hello, 12345!";
			String newText = text.replaceAll("\\d", "*");
			// newText에는 "Hello, *****!"가 저장됨

		
        split(String regex)
		- 문자열을 정규 표현식 regex를 기준으로 분할하여 문자열 배열을 반환함
		- 분할된 부분 문자열은 배열 요소로 저장됨
			String text = "apple,banana,cherry";
			String[] fruits = text.split(","); 
			// fruits 배열에는 {"apple", "banana", "cherry"}가 저장됨

		
        strip()
		- 문자열의 앞뒤 공백(스페이스, 탭, 줄바꿈 등)을 제거
			String text = "  Hello, world!  ";
			String strippedText = text.strip(); // strippedText에는 "Hello, world!"가 저장됨

		
        substring(int beginIndex)
		- 문자열의 일부분을 추출
		- beginIndex 이후의 모든 문자를 반환
			String text = "Hello, world!";
			String subText = text.substring(7); // subText에는 "world!"가 저장됨

		
		toString()
		- 객체를 문자열로 변환
		- 객체를 문자열로 표현할 때 사용됨
			Integer num = 42;
			String strNum = num.toString(); // strNum에는 "42"가 저장됨

		
        trim()
		- 문자열의 앞뒤 공백(스페이스, 탭, 줄 바꿈 등)을 제거
		- strip()와 유사
			String text = "  Hello, world!  ";
			String trimmedText = text.trim(); // trimmedText에는 "Hello, world!"가 저장됨

		
        valueof(Object obj)
		- 주어진 객체 obj를 문자열로 변환
		- 객체를 문자열로 표현할 때 사용
			int num = 42;
			String strNum = String.valueOf(num); // strNum에는 "42"가 저장됨
