도움말 https://docs.oracle.com/en/java/javase/17/docs/api/index.html

1. 자바 개발 도구
    (1) 컴파일러
        - 내가만든 코드를 컴퓨터가 알아서 번역할 수 있게 해주는 도구
            - JDK (Java Developer Kit)
            - JRE(Java Runtime Environment)
            - 17버전 (LTS버전)

    (2) 환경변수 등록
        - JAVA_HOME
        - PATH
            path를 설정하게 되면 아무대서나 프로그램을 실행시킬 수 있게 됨
            제어판-> 시스템 보호 -> 시스템 -> 고급설정 -> 환경변수 -> 시스템변수
            -> 새로만들기-> C:\Program Files\Zulu\zulu-17\bin 경로설정
        - 테스트
            javac -version
            java -version    
            설정이 잘 됐는지 cmd에서 확인

2. JAVA 대표 기술
    (1) Java SE: 응용 프로그램 (도스용, 윈도우용)
    (2) Java EE: 분산, Web, 안드로이드
    (3) Java ME: Embeded
    (4) FX, ...

3. 문자 인코딩
    - 명령 프롬프트
        chcp 65001: UTF-8
        chcp 949: 기본 한글 윈도우 방식
        클래스파일이 아닌 빈폴더에 저장되게끔 설정하는 법
            - src>javac -d../bin InputTest.java

        

4. 변수와 데이터 타입
    (1) 데이터 타입
        1) 기본 데이터 타입 (비객체 데이터 타입)
            - 정수형
                byte(1)= 127까지만 가능, short(2byte), int(4, default), 
                long(8)
            - 실수형
                float(4byte), double(8byte, default)
            - 문자형
                char(2byte)-> 한글자만 가능 (한글자''사용);
            - 논리형
                boolean: true, false

        2) 객체 데이터 타입 (참조 타입)
            - User Define (사용자 정의)
            - Built in

    (2) 변수
        1) 임시 기억 공간
        2) 반드시 선언 및 초기화
        3) 반드시 선언한 곳에서만 사용할 수 있음 (유효 범위)
            - stack: 임시적
            - heap: 장기적

    (3) 연산자
        1) 강제 형변환 연산자 (캐스팅 연산자)
            변수 = (데이터 타입)값;
            * 단락회로 기능
            앞의 것이 거짓이면 뒤에 것은 조건을 평가하지 않음
             int a=10, a<9 && ++b>5; ++b는 평가x; 고로 출력할 때 증감x
            
            - 형 변환: int c = (int) a + (int) b;
            - 자동 형 변환: b1 += 5;
            - 숫자 뒤에 변수 첫글자 쓰면 데이터 형변환; float f1 = 3.14f;
            - ASCII코드로 인해 문자와 숫자 전부 다른 숫자로 변환됨

        * System.in.skip(2); 데이터 건너뛰기

5. Class - 1
    (1) 특징
        1) 묶음: 변수(멤버변수, 인스턴스 변수, 속성, 필드), 함수(메서드, 멤버함수)
        2) 캡슐화 단위: 최소 단위, 편리, 보안성
        3) 설계도 (추상적= 일반화시켜서 보이는 것, 한번에 보이게끔)-> 인스턴스
        4) 데이터 타입의 역할
        5) 객체 설계 5원칙: SOLID
        6) 객체의 자격 요건
            - 상속형(Inheritance)
            - 다형성(Polymorphism)
            - 캡슐화(Incapsulation)

    * 클래스는 선언만 하는 곳 문법 사용x; 문법은 main메소드 안에서만.
    * new 메소드명(); 객체 생성법
      new MethodTest2().swap(num1, num2); 메소드 불러오기 문법;
    * 같은 패키지 안에서 동일한 클래스파일은 사용불가

    (2) 변수의 종류
        1) 선언된 위치에 따른
            - 클래스: 멤버 변수, 인스턴스 변수, 필드
            - 메소드: 변수(지역 변수)

        2) 저장되는 값에 따른
            - 값: 변수 (기본데이터 타입으로 선언)
            - 주소: 참조 변수 (클래스로 선언)

    (3) 메소드
        1) 동작(기능)을 구현
        2) 작성 방법
            리턴타입 메소드명(...) {
                기능 구현
            }

        3) 호출 방식
            - 인자가 없는 방식
            - 인자가 있는 방식
                - Call By Value: 값에 의한 전달
                - Call By Reference: 참조에 의한 전달
            - 리턴값이 있는 방식

    (4) 메소드의 오버로딩: 중복 정의
        - 매개변수가 달라야 함 (갯수, 형식, 순서)

    (5) 생성자(Constructor)
		1) 인스턴스 생성
		2) 메서드명은 반드시 클래스명과 동일
		3) 리턴 타입이 없다.
		4) 인스턴스를 생성할 때 단 한번만 호출
		5) 모든 클래스는 기본 생성자(Default Constructor)를 갖는다.
			만약, 다른 생성자를 만들 경우 더 이상 기본 생성자는 제공되지 않는다.
		6) 초기화
	(6) Garbage Collection
		1) JVM
		2) System.gc()
		3) finalize()
	(7) this
		1) 현재 실행 중인 인스턴스의 주소를 저장하는 참조 변수
		2) read only
		3) this()	

6. ANT
	(1) 자바 언어를 사용하여 필요한 일련화된 과정을 자동화하는 소프트웨어 빌드 도구
	(2) Ant > Maven > Gradle
	(3) 설치
		1) https://ant.apache.org/
		2) apache-ant-1.10.14-bin.zip
		3) 환경 변수 등록 : ANT_HOME, Path
	(4) 테스트
		ant
		ant -version
	(5) 사용법
		1) build.xml 파일 생성
			- work03 폴더에 생성
			<project>
				<target>
					<명령어 ... />
				</target>
				...
			</project>

		2) build.xml이 있는 위치에서 ant 프로그램 실행


7. 배열
    (1) 같은 이름으로 정의된 연속적인 공간
        - 배열은 삽입/삭제가 안됨
        - 보관에는 매우 유용, 허나 데이터 삽입, 삭제에는 매우 불편
        - 자바에서 배열은 class로 만들어져있어 순수한 배열은 아님/ 유용.
        - 같은 자료형, 크기 문제등이 class하나로 해결됨.

    (2) 배열 문법
        int[] 변수명 = new int[4]; 데이터 저장 공간 만들기;
        변수명[0] = 1;
		변수명[1] = 78;
		변수명[2] = 65;
		변수명[3] = 89;

        int[] 변수명 = {1, 78, 65, 89};

    (3) 배열의 응용
        1) 검색 기능
            - 순차검색(sequential)
            - 이분(이진) 검색(Binary Search); 먼저 데이터 정렬이 되어야 가능
                어떤 데이터든 둘로나눠가며 찾기;

        2) 정렬 기능
            -버블, 선택, 삽입, 퀵
            ---------------------------------------------
            - 버블 정렬: 서로 이웃하는 것끼리 비교하여 교환
            6       3       7       5

            3       6       7       5   첫번 째 자리바꿈; 오름차순
            3       6       7       5   7이 큰 값이라 그대로임
            3       6       5       7   5가 더작아서 바뀜;
            여기까지가 한번의 반복.
            3       6       5       7   그대로임;
            3       5       6       7   5가 보다 작아서 바뀜
            나머지 3~4번째는 이미 3567로 정렬 완료라 값이 안바뀜.
            반복횟수: 총 데이터 개수의 -1;
            -----------------------------------------------
            - 선택 정렬: 기준을 선택해서 비교하여 교환
            6       3       7       5   기준점 3으로 설정

            3       6       7       5   큰값이 왼쪽이라 바뀜;
            3       6       7       5   3을 기준점으로 봤을 때 전부 커서 변동x
            3       6       7       5   

            3       6       7       5   기준점 6으로 설정
            3       5       7       6   6과 오른쪽을 비교할게 없어서 끝

            3       5       7       6   기준점 7
            3       5       6       7   큰값이 왼쪽이라 바뀜;


    (4) 자바는 배열을 객체로 취급함
    
    (5) 다차원 배열(2차원 배열 이상)
        int[][] 변수명 = new int[3][4];

        int [][] 변수명 = {
				{1, 78, 65, 89},
				{2, 78, 65, 89},
				{3, 78, 65, 89}
		};
        System.out.println(변수명[0][0]);

    (6) 불규칙 배열
        char[][] name = new char[2][6];
		name[0][0] = 'T';
		name[0][1] = 'o';
		name[0][2] = 'm';
		
		name[1][0] = 'M';
		name[1][1] = 'a';
		name[1][2] = 'r';
		name[1][3] = 'r';
		name[1][4] = 'y';
//		불규칙 배열: 그때 그때 필요한만큼만 열을만드는 작업, 공간 아끼기
		char [][] name2 = new char [2][];
		name2[0] = new char[3];
		name2[1] = new char [5];

    (7) String
        1) 불변성: 값을 수정할 수 없음
            String s5 = "javu";
            s5 = "java";
            System.out.println(s5);
            값이 수정되는 것이 아니고 새로운 객체가 생겨서 그 객체를 참조하는 것
            즉,String s5 = "javu";는 쓰레기, 데이터 낭비가 됨;

        2) StringBuffer, StringBuilder

        3) 문자열도 객체로 취급
            - 문자열.함수 등 가져오기 가능

        4) 동일한 값을 갖는 인스턴스를 중복해서 만들지 않는다.
            - 기존의 인스턴스 같이 활용 가능


    * 쓰임을 알아야 할 최소 함수
        charAt()
        compareTo(), compareToIgnoreCase()
        startsWith(), endswith()
        equals(), equalsIgnoreCase()        
        getbyte()

        indexof(), lastindexof()
        isblank(), isempty()       
        join()       
        length()
        matches()
        
        replace(), replaceAll()
        split()
        strip()
        substring(), toString()
        trim()
        valueof()
         
    (8) Command Line Argument

8. Class - 2
    (1) Access Modifier
        1) default; 접근 부분적 허용
            -동일한 패키지 내에서만 접근 가능
            - 다른 패키지에서는 접근x
            - 접근 제어자 명시 안했을 때의 기본으로 적용

        2) public; 접근 완전 허용
            - 어떤 클래스든 패키지든 다 접근 가능

        3) private; 완전 거부
            - 같은 패키지도 접근 못함
            - 같은 클래스에서만 접근 가능
            - 다른 클래스 접근x

        4) protected; 부분 거부
            - 동일한 패키지 내에서와 상속 관계ㅇ;  상속 받은 클래스에서 사용될 때 유용

    (2) 메소드의 인자 전달 방식
        1) 값에 의한 전달
            - 소량의 데이터, 간단한 데이터

        2) 참조에 의한 전달
            - 대량 또는 복잡한 데이터

    (3) 재귀 호출
        1) Stack
            - 지역 변수
            - 임시 데이터나 주소값 저장
            - 메소드의 복귀 주소
            - LIFO 구조

        2) Heap
            - 전역 변수, 객체
            - 지속적으로 값을 보관
        
        3) Queue
            - 지역 변수
            - 임시 데이터나 주소값 저장
            - FIFO 구조

    (4) Static
        1) 클래스, 메서드, 변수 모두 사용 가능
        2) 인스턴스와 별도로 프로그램 실행 시 만들어지는 메모리
        3) 다른 모든 인스턴스들이 공동으로 사용하는 메모리
        4) 단 1개만 만들어지는 메모리
        5) 클래스 변수
            - 클래스 안에서만 static선언 가능; main메소드에서는 불가

    (5) Singleton Pattern
        1) 필요없는 객체가 생성되는 것을 방지하기 위한 목적;
           단 1개의 인스턴트만 만들 수 있게 함 

        2) 방법
            - 절대 인스턴스가 생성되는 것을 막아야 함.
            - 자체적으로 인스턴스를 생성해서 리턴
            - 생성자, private, static

    (6) 중첩 클래스(내부 클래스)
        1) 클래스 내부에 다른 클래스를 포함하는 것

        2) 내부 클래스
            - General Class: 일반 클래스
            - Static Class

        3) 중첩 클래스를 사용해야 하는 경우
            - 클래스들끼리 자주 접근해야 하는 경우
            - 전용 클래스로 사용할 경우

        4) 내부 클래스는 외부클래스$내부클래스.class파일로 작성됨
            - 예시)OuterClass$InnerClass.class

9. Class - 3: 상속
    (1) 상속 문법
        - public class CmsExt extends Cms{}
                        자식(sub)      부모(super)
        - extends로 상속 받을 수 있음

    (2) 상속 제외
        1) 생성자
            - 생성자는 물려주지 않음
        2) private
            - 가장 강력한 보안이기에 상속 제외
            - getter, setter -> 입력 첫글자는 대문자; getLevel

    (3) 부모의 생성자는 호출이 가능함
        1) super(): 부모의 생성자 호출

        2) 부모의 생성자를 호출할 때에는 반드시 자식의 생성자 메서드에서 가장 
           처음에 호출

        3) super: 참조 변수(this)
            super.변수, super.메소드()

    (4) 생성자의 호출 순서
        - 부모것이 먼저 생성됨
        - 자식의 기본 생성자내에서 항상 부모의 기본 생성자가 호출 되고 있음

    (5) 상속은 확장의 개념임. (extends)

    (6) 상속은 반드시 단일 상속만 지원됨
        상속 설계:
            1) 중복 기능을 가지지 않게 해야 함.
            2) 부모 클래스는 반드시 최소의 기능을 갖게 해야 함.
            3) 부모 클래스는 재사용이 가능해야 함.

    (7) 부모 클래스와 자식 클래스의 참조 관계
        1) 인스턴스가 결정되지 않은 경우
            a(부모)   b   c   d - 나머지 자식
            A obj = new B();
            A obj = new C();
            A obj = new D(); 부모라 전부 참조 가능

            B b = (B)obj; 캐스트 사용 시 호환 가능; 미리 주소만 받아놨으면;

        2) 여러 개의 자식 인스턴스 관리
            A a[] = new A[5];
            for(int i = 0; i<5; i++)
                a[i] = new A()

                a[0] = new B();
                a[1] = new C();
                a[2] = new B();

        - 서로 다른 클래스는 절대로 참조할 수 없음
        - 부모만 자식 클래스를 참조 가능; 자식은 부모 참조x;
        - 자식이 새로 만든 것은 부모도 참조할 수 없음.

    (8) 메소드의 오버라이딩(Overriding)
        1) 오버로딩
            - 메소드; 메소드에 대해서만 해당하는 이야기
            - 다형성을 지원하는 문법
            - 중복 정의
            - 같은 메소드를 여러개 만듬
            - 아무대서나 사용 가능

        2) 오버라이딩
            - 메소드; 메소드에 대해서만 해당하는 이야기
            - 다형성을 지원하는 문법
            - 재정의
            - 하나의 메소드를 수정해가며 씀
            - 불편하지만 절약 가능
            - 반드시 상속에서만 사용 가능

    (9) 추상 클래스 , 추상 메소드 : abstract
        - 오버라이딩에서 파생됨
        - 자식에게 무언가를 물려주기위한 목적임
        
        1) 추상 메소드
            - 내용이 없이 선언만 되어있는 메소드
            - 반드시 메소드 앞에 sbstract 키워드 사용
            - 자식 클래스는 반드시 오버라이딩을 해야 함

        2) 추상 클래스
            - 추상 메소드를 1개 이상 보유
            - 반드시 클래스 앞에 abstract 키워드 사용
            - 절대 인스턴스를 생성할 수 없음

    (10) final
        1) 변수
            static final int MAX = 10;
            ...
            MAX = 100; // 에러
            상수는 보통 대문자로 표기; 변수와 구별하기 위해서

            if(x<MAX) {...}

        2) 메소드
            final void method() {
                ...
            }

        3) 클래스
            final class A {
                ...
            }

    (11) Object
        Object obj = new ?();

10. 인터페이스(Interface)
    (1) 클래스를 만들기 위한 설계도
    (2) 완전 추상 클래스; 즉, 추상 메소드의 집합
    (3) 표준화를 위한 약속, 규칙
    (4) 의존성(dependency)를 최소화
    (5) 다중 상속을 지원
    (6) implements

11. 패키지(package)
    (1) 묶음(폴더): 클래스

    (2) 효과
        1) 필요한 클래스를 적재 적소에 사용 가능
        2) 클래스 이름 충돌 방지

    (3) 사용방법
        1) 패키지는 하위 폴더에서 실행
        2) 패키지.클래스명으로 실행

    (4) 압축
        1) 압축을 할 때: jar cvf [파일명.jar] [압축할 파일명.java] 
            ex) jar cvf bookpack.jar BookPack

        2) 압축을 풀 때: jar xvf 파일명.jar
           
12. 기본 APIs: java.lang, java.util, java.text
    (1) Date와 Calendar
    (2) CurrentTimeMillis();
    (3) Random
    (4) DecimalFormat
    (5) Wrapper
    (6) StringTokenizer
    (7) Collection
        1) 변수 -> 배열 -> 클래스 -> 컬랙션(클래스 + 연결리스트)
            - 컬렉션: 데이터를 다루는데에 최상의 컨디션 제공

        2) 종류
            - Set
                - 저장을 위한 목적
                정렬 순서가 없음
                중복되지 않음
                HashSet, LinkedHashSet, TreeSet ...

            - List
                - 리스트 형식으로 쓰기 위한 목적
                정렬 순서가 있음
                중복될 수 있음
                ArrayList, Vector, LinkedList, ...

            - Map
                - 검색을 위한 목적
                - 키와 값을 한 쌍으로 저장
                HashMap, HashTable, ...

13. Generic
    (1) 특정 타입(객체형)을 미리 검사

    (2) C++의 Template 기능

    (3) 문법
        1) 클래스나 메소드에서 사용
        2) 사용 문법
            클래스명<객체 타입> 변수 = new 클래스<객체 타입>();

14. 예외 처리
    - 예외가 발생했을 때 예외에 대한 제어권을 시스템(JVM)이 아니라 개발자가
      가질 수 있게 하는 방법
    (1) WHY?
        1) 예외가 발생했을 때 메시지에 대한 표현 문제
        2) 프로그램의 비정상적인 종료

    (2) 문법
        1) try
        2) catch
            - try catch 한쌍; 필수용
        3) throw
            - 블록 안에서 사용
        4) throws
            - 블록 바깥에서 사용
        5) finally
        ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
        try {
            예외가 발생할 가능성이 있는 코드
            
        } catch (예외타입 객체) {
            코드들
            ...
        }

    (3) 예외 계층도
        Throwalbe
            - Error
            - Exception
                - RuntimeException
                    실행 중 오류 발생햇을 때

                - ArrayIndexOutOfBoundsException
                    배열 잘못일 때 쓰는 exception

                - ArithmeticException
                    연산 잘못일 때 쓰는 exception

                - IOException
                    입출력 작업과 관련된 예외 처리

                - Exception
                    모든 오류 다잡음

15. IO(Input Output)
    (1) Stream
        1) 단방향
        2) 원칙적으로 순차적
        3) 지연(blocking) 발생 가능
        4) 어떤 장치를 사용하던 간에 사용법은 거의 동일

    (2) java.io -> java.nio
        기본적인      좀더 복잡한 작업 가능
    
    (3) 자바에서 구현한 Stream클래스
        1) ByteStream
            - 이진 데이터 읽고 씀
            - InputStream 및 OutputStream 클래스를 기반으로 함
                InputStream: read();
                OutputStream: write();
                ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
                - 파일 입출력: FileInputStream, FileOutputStream
                - 이진 데이터 입출력: DataInputStream, DataOutputStream
                - 임의 접근: RandomAccessFile
                - 객체 입출력: ObjectInputStream, ObjectOutputStream

        2) CharacterStream
            - 텍스트 데이터를 읽고 씀
            - ByteStream보다 성능은 떨어짐
            - Reader 및 Writer 클래스를 기반으로 함
                Reader: read();
                Writer: write();

        3) PrintStream
            - PrintWriter

16. Thread
        * Thread
            - 하나의 프로세스내에서 여러 작업을 동시에 수행할 수 있도록 해줌

    (1) 프로그램 vs. 프로세스
        1) Multi Process
            - 엑셀, 워드처럼 독립적이라 하나가 에러떠도 다른 하나에 지장x

        2) Multi Thread
            - 동시에 여러개의 프로그램을 실행시킴
            - 어느 하나에 문제가 생기면 다른쪽에도 문제가 생길 수 있음
              고로 예외 처리에 만전을 기해야 함

    (2) 모든 프로그램은 반드시 기본적으로 한 개의 Thread를 가지고 있음
        - main();
    
    (3) Thread 생성 방법
        1) Thread 클래스
        2) Runnable 인터페이스

    (4) LifeCycle
        - Thread는 start라는 방으로 들어와야 run이라는 곳으로 갈 수 있음
        - suspend로 잠깐 쉬는 곳으로 감, resume으로 호출해서 다시 start로 감
        - 단, resume으로 호출을 안하고 까먹으면 위험하기에 sleep이라는 휴게실로 
          감; 초단위를 설정해서 지연시킴;

    (5) Thread의 강제 종료
        1) stop();
        2) interrupt();
        3) 직접 제어(flag)

    (6) Thread의 종료 시점
        1) isAlive();
            - 다른 일들이 다끝낫는지 물어보고 끝났으면 나도 종료;
        2) join();
            - 해당 작업의 쓰레드가 종료될 때까지 메인 쓰레드는 대기함

    (7) 동기화
        1) synchronized
            - 메소드 앞에 synchronized 붙이면 해결
            public synchronized void openDoor(String name) {}
        
        2) 처리 방법
            - method
            - block
                synchronized(인스턴스 주소) {
                    코드
                }
